import logging
import asyncio
from aiogram import Bot, Dispatcher, types, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
import aiohttp
from pydantic import BaseModel
from dotenv import load_dotenv
import os

load_dotenv()

API_TOKEN = os.getenv('TELEGRAM_KEY')

logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä —Å FSM (—Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) —Å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º –≤ –ø–∞–º—è—Ç–∏
bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())
router = Router()

# –ú–æ–¥–µ–ª—å –¥–ª—è –æ—Ç–≤–µ—Ç–∞
class SurveyResponse(BaseModel):
    target_audience: str
    technical_specifications: str
    budget: str
    competitors: str
    marketing_plan: str
    mvp: str

# –°–æ—Å—Ç–æ—è–Ω–∏—è –æ–ø—Ä–æ—Å–∞
class SurveyStates(StatesGroup):
    choosing_language = State()  # –í—ã–±–æ—Ä —è–∑—ã–∫–∞
    waiting_for_survey = State()
    asking_target_audience = State()  # –í–æ–ø—Ä–æ—Å –æ —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏
    asking_technical_specifications = State()  # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ
    asking_budget = State()  # –í–æ–ø—Ä–æ—Å –æ –±—é–¥–∂–µ—Ç–µ
    asking_competitors = State()  # –í–æ–ø—Ä–æ—Å –æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞—Ö
    asking_marketing_plan = State()  # –í–æ–ø—Ä–æ—Å –æ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–æ–º –ø–ª–∞–Ω–µ
    asking_mvp = State()  # –í–æ–ø—Ä–æ—Å –æ MVP

# –•—Ä–∞–Ω–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
questions = {
    'target_audience': {
        'en': "Have you defined your target audience? Who will be your users?",
        'ru': "–û–ø—Ä–µ–¥–µ–ª–∏–ª–∏ –ª–∏ –≤—ã –≤–∞—à—É —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é? –ö—Ç–æ –±—É–¥—É—Ç –≤–∞—à–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏?"
    },
    'technical_specifications': {
        'en': "Do you have a technical specification for development?",
        'ru': "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏?"
    },
    'budget': {
        'en': "Do you have a budget for development and promotion?",
        'ru': "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –±—é–¥–∂–µ—Ç –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è?"
    },
    'competitors': {
        'en': "Have you analyzed competitors? How do you plan to differ?",
        'ru': "–ü—Ä–æ–≤–µ–ª–∏ –ª–∏ –≤—ã –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤? –ö–∞–∫ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –æ—Ç–ª–∏—á–∞—Ç—å—Å—è?"
    },
    'marketing_plan': {
        'en': "Do you have a marketing plan to attract users?",
        'ru': "–£ –≤–∞—Å –µ—Å—Ç—å –ø–ª–∞–Ω –ø–æ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥—É –∏ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π?"
    },
    'mvp': {
        'en': "Have you determined the minimal viable product (MVP) for your project?",
        'ru': "–û–ø—Ä–µ–¥–µ–ª–∏–ª–∏ –ª–∏ –≤—ã –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤–∫–ª—é—á–µ–Ω –≤ –≤–∞—à –ø—Ä–æ–¥—É–∫—Ç?"
    }
}

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –±–æ—Ç–∞
@router.message(Command("start"))
async def start_command(message: types.Message, state: FSMContext):
    await message.answer("Please choose your language:\n1. English (/en)\n2. –†—É—Å—Å–∫–∏–π (/ru)")
    await state.set_state(SurveyStates.choosing_language)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
@router.message(Command("en"), SurveyStates.choosing_language)
@router.message(Command("ru"), SurveyStates.choosing_language)
async def set_language(message: types.Message, state: FSMContext):
    lang = message.text[1:]  # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –∏–∑ –∫–æ–º–∞–Ω–¥—ã ('/en' –∏–ª–∏ '/ru')
    await state.update_data(lang=lang)
    await message.answer("Language set! Type /survey to start the survey.")
    await state.set_state(SurveyStates.waiting_for_survey)

# –ù–∞—á–∞–ª–æ –æ–ø—Ä–æ—Å–∞
@router.message(Command("survey"), SurveyStates.waiting_for_survey)
async def start_survey(message: types.Message, state: FSMContext):
    data = await state.get_data()
    if 'lang' not in data:
        await message.answer("Please choose your language first with /en or /ru.")
        return

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    lang = data['lang']
    await message.answer(questions['target_audience'][lang])
    await state.set_state(SurveyStates.asking_target_audience)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
@router.message(SurveyStates.asking_target_audience)
async def handle_target_audience(message: types.Message, state: FSMContext):
    await state.update_data(target_audience=message.text)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    data = await state.get_data()
    lang = data['lang']
    await message.answer(questions['technical_specifications'][lang])
    await state.set_state(SurveyStates.asking_technical_specifications)

@router.message(SurveyStates.asking_technical_specifications)
async def handle_technical_specifications(message: types.Message, state: FSMContext):
    await state.update_data(technical_specifications=message.text)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    data = await state.get_data()
    lang = data['lang']
    await message.answer(questions['budget'][lang])
    await state.set_state(SurveyStates.asking_budget)

@router.message(SurveyStates.asking_budget)
async def handle_budget(message: types.Message, state: FSMContext):
    await state.update_data(budget=message.text)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    data = await state.get_data()
    lang = data['lang']
    await message.answer(questions['competitors'][lang])
    await state.set_state(SurveyStates.asking_competitors)

@router.message(SurveyStates.asking_competitors)
async def handle_competitors(message: types.Message, state: FSMContext):
    await state.update_data(competitors=message.text)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    data = await state.get_data()
    lang = data['lang']
    await message.answer(questions['marketing_plan'][lang])
    await state.set_state(SurveyStates.asking_marketing_plan)

@router.message(SurveyStates.asking_marketing_plan)
async def handle_marketing_plan(message: types.Message, state: FSMContext):
    await state.update_data(marketing_plan=message.text)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    data = await state.get_data()
    lang = data['lang']
    await message.answer(questions['mvp'][lang])
    await state.set_state(SurveyStates.asking_mvp)

async def send_long_message(chat_id: int, text: str, bot: Bot, chunk_size: int = 4096):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —á–∞—Å—Ç—è–º."""
    for chunk in [text[i:i + chunk_size] for i in range(0, len(text), chunk_size)]:
        await bot.send_message(chat_id, chunk)

async def format_and_send_response(chat_id: int, response_data: dict, bot: Bot):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –æ–ø—Ä–æ—Å–∞ –ø–æ —á–∞—Å—Ç—è–º."""
    
    # –û—Ü–µ–Ω–∫–∏ (evaluations)
    evaluations = response_data.get("evaluations", {})
    eval_message = "üîç **Evaluations**:\n"
    for key, value in evaluations.items():
        eval_message += f"‚Ä¢ **{key.capitalize()}**: {value}\n"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ü–µ–Ω–∫–∞–º–∏
    await send_long_message(chat_id, eval_message, bot)

    # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å (overall_status)
    overall_status = response_data.get("overall_status", "No status available")
    status_message = f"üìä **Overall Status**: {overall_status}\n"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—â–∏–º —Å—Ç–∞—Ç—É—Å–æ–º
    await send_long_message(chat_id, status_message, bot)

    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (recommendations)
    recommendations = response_data.get("recommendations", [])
    rec_message = f"üí° **Recommendations**: \n {recommendations}"

    await send_long_message(chat_id, rec_message, bot)
    

# –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
@router.message(SurveyStates.asking_mvp)
async def handle_mvp(message: types.Message, state: FSMContext):
    await state.update_data(mvp=message.text)

    # –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã, —Å–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    response_data = SurveyResponse(
        target_audience=data['target_audience'],
        technical_specifications=data['technical_specifications'],
        budget=data['budget'],
        competitors=data['competitors'],
        marketing_plan=data['marketing_plan'],
        mvp=data['mvp']
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    async with aiohttp.ClientSession() as session:
        async with session.post('http://api:8000/survey', json=response_data.dict()) as resp:
            if resp.status == 200:
                server_response = await resp.json()  # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –∫–∞–∫ JSON
                await format_and_send_response(message.chat.id, server_response, bot)  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —á–∞—Å—Ç—è–º
            else:
                await message.answer("There was an error submitting your survey. Please try again later.")

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞
    await state.set_state(SurveyStates.waiting_for_survey)
# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
